"use strict";(self.webpackChunkmohan_doc=self.webpackChunkmohan_doc||[]).push([[1681],{5582:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>c,default:()=>h,frontMatter:()=>a,metadata:()=>t,toc:()=>o});const t=JSON.parse('{"id":"stack-vs-heap","title":"Stack vs Heap","description":"Stack","source":"@site/docs/stack-vs-heap.md","sourceDirName":".","slug":"/stack-vs-heap","permalink":"/mohan-doc/docs/stack-vs-heap","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/stack-vs-heap.md","tags":[],"version":"current","frontMatter":{"id":"stack-vs-heap","title":"Stack vs Heap","sidebar_label":"Stack vs Heap"},"sidebar":"tutorialSidebar","previous":{"title":"intro","permalink":"/mohan-doc/docs/intro"},"next":{"title":"Web Components","permalink":"/mohan-doc/docs/web-component"}}');var i=s(4848),r=s(8453);const a={id:"stack-vs-heap",title:"Stack vs Heap",sidebar_label:"Stack vs Heap"},c="Stack and Heap in JavaScript",l={},o=[{value:"Stack",id:"stack",level:2},{value:"Heap",id:"heap",level:2}];function d(e){const n={h1:"h1",h2:"h2",header:"header",hr:"hr",li:"li",p:"p",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"stack-and-heap-in-javascript",children:"Stack and Heap in JavaScript"})}),"\n",(0,i.jsx)(n.h2,{id:"stack",children:"Stack"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.strong,{children:"stack"})," is used for storing short-lived data such as:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Function calls"}),"\n",(0,i.jsx)(n.li,{children:"Local variables (e.g., strings, numbers)"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"When a function is called, it's added (pushed) to the stack. When it finishes, it's removed (popped) from the stack."}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["If too many function calls happen without returning (e.g., deep or infinite recursion), we face a ",(0,i.jsx)(n.strong,{children:'"Maximum call stack size exceeded"'})," error."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["This happens when the browser or Node.js reaches its ",(0,i.jsx)(n.strong,{children:"call stack limit"}),"."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["In Chrome or Node.js, the limit is typically between ",(0,i.jsx)(n.strong,{children:"10,000 to 20,000 calls"}),", depending on how much RAM is in use."]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"heap",children:"Heap"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.strong,{children:"heap"})," is used for storing complex and long-lived data, such as:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Objects"}),"\n",(0,i.jsx)(n.li,{children:"Arrays"}),"\n",(0,i.jsx)(n.li,{children:"Functions"}),"\n",(0,i.jsx)(n.li,{children:"Long or dynamic strings"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Data stored in the heap is managed by ",(0,i.jsx)(n.strong,{children:"Garbage Collection (GC)"}),"."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"For example:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"If a function creates an object and returns it, and we assign the result to a variable, the data stays in the heap."}),"\n",(0,i.jsx)(n.li,{children:"If we don\u2019t reference the returned object, it will eventually be garbage collected."}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["The heap is ",(0,i.jsx)(n.strong,{children:"larger"})," than the stack and suitable for storing ",(0,i.jsx)(n.strong,{children:"dynamic or complex structures"})," that need to persist in memory longer."]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Summary"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Stack"}),": Short-lived, simple data; limited size; fast; call stack errors possible."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Heap"}),": Long-lived, complex data; larger; managed by GC."]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>a,x:()=>c});var t=s(6540);const i={},r=t.createContext(i);function a(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);